{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d3fabc35-69cf-4d8e-9ce4-d6be517f5ebf",
   "metadata": {},
   "outputs": [],
   "source": [
    "# app.py\n",
    "# -*- coding: utf-8 -*-\n",
    "# Streamlit：按 Banner 展示「Craft Beer 卖得好 & 未售 Brothers」的店面排行榜\n",
    "\n",
    "import io\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import streamlit as st\n",
    "import altair as alt\n",
    "\n",
    "st.set_page_config(page_title=\"Craft Beer Stores (No Brothers)\", layout=\"wide\")\n",
    "st.title(\"按 Banner：Craft Beer 卖得好 & 未售 Brothers 的店面\")\n",
    "st.caption(\"上传你的 CSV（包含 *_SALES / *_VOLUME 周度列），我们会自动汇总到 TOTAL_* 后做店面榜单。\")\n",
    "\n",
    "# ============== Sidebar：输入与选项 ==============\n",
    "uploaded = st.sidebar.file_uploader(\"上传 CSV 文件\", type=[\"csv\"])\n",
    "path = st.sidebar.text_input(\"或填写本地 CSV 路径（可留空）\", value=\"\")\n",
    "strict_two_words = st.sidebar.checkbox(\"Brothers 匹配为首两词 'BROTHERS BEER'（默认仅首词 'BROTHERS'）\", value=False)\n",
    "top_n = st.sidebar.number_input(\"每个 Banner 取前 N 名（留空或 0 = 显示全部）\", min_value=0, max_value=500, value=20, step=5)\n",
    "\n",
    "# ============== 读数 ==============\n",
    "def load_df(uploaded, path):\n",
    "    if uploaded is not None:\n",
    "        return pd.read_csv(uploaded)\n",
    "    if path.strip():\n",
    "        return pd.read_csv(path.strip())\n",
    "    st.stop()\n",
    "\n",
    "try:\n",
    "    df = load_df(uploaded, path)\n",
    "except Exception as e:\n",
    "    st.error(f\"读取 CSV 失败：{e}\")\n",
    "    st.stop()\n",
    "\n",
    "# 必要字段检查（可根据你的真实列名调整）\n",
    "required_cols = {\"PRODUCT_NAME\", \"PRODUCT_GROUP\", \"BANNER\", \"STORE_REGION\", \"STORE_NAME\", \"STORE_CODE\"}\n",
    "missing = [c for c in required_cols if c not in df.columns]\n",
    "if missing:\n",
    "    st.error(f\"缺少必要列：{missing}\")\n",
    "    st.stop()\n",
    "\n",
    "# ============== 预处理：汇总 TOTAL_SALES / TOTAL_VOLUME ==============\n",
    "sales_cols = [c for c in df.columns if str(c).upper().endswith(\"_SALES\")]\n",
    "vol_cols   = [c for c in df.columns if str(c).upper().endswith(\"_VOLUME\")]\n",
    "\n",
    "if not sales_cols and not vol_cols:\n",
    "    st.error(\"没有找到 *_SALES 或 *_VOLUME 周度列。\")\n",
    "    st.stop()\n",
    "\n",
    "if sales_cols:\n",
    "    df[sales_cols] = df[sales_cols].apply(pd.to_numeric, errors=\"coerce\")\n",
    "    df[\"TOTAL_SALES\"] = df[sales_cols].sum(axis=1).fillna(0)\n",
    "else:\n",
    "    df[\"TOTAL_SALES\"] = 0.0\n",
    "\n",
    "if vol_cols:\n",
    "    df[vol_cols] = df[vol_cols].apply(pd.to_numeric, errors=\"coerce\")\n",
    "    df[\"TOTAL_VOLUME\"] = df[vol_cols].sum(axis=1).fillna(0)\n",
    "else:\n",
    "    df[\"TOTAL_VOLUME\"] = 0.0\n",
    "\n",
    "# ============== 过滤口径 ==============\n",
    "pattern = r\"^\\s*BROTHERS\\s+BEER\\b\" if strict_two_words else r\"^\\s*BROTHERS\\b\"\n",
    "bro_mask = df[\"PRODUCT_NAME\"].astype(str).str.match(pattern, case=False, na=False)\n",
    "craft_mask = df[\"PRODUCT_GROUP\"].astype(str).str.contains(\"Craft Beer\", case=False, na=False)\n",
    "\n",
    "# ============== 门店层级聚合 ==============\n",
    "store_cols = [\"BANNER\", \"STORE_REGION\", \"STORE_NAME\", \"STORE_CODE\"]\n",
    "\n",
    "craft_store = (\n",
    "    df.loc[craft_mask]\n",
    "      .groupby(store_cols, dropna=False)[[\"TOTAL_VOLUME\", \"TOTAL_SALES\"]]\n",
    "      .sum().reset_index()\n",
    "      .rename(columns={\"TOTAL_VOLUME\": \"CRAFT_VOLUME\", \"TOTAL_SALES\": \"CRAFT_SALES\"})\n",
    ")\n",
    "\n",
    "bro_store = (\n",
    "    df.loc[bro_mask]\n",
    "      .groupby(store_cols, dropna=False)[[\"TOTAL_VOLUME\", \"TOTAL_SALES\"]]\n",
    "      .sum().reset_index()\n",
    "      .rename(columns={\"TOTAL_VOLUME\": \"BRO_VOLUME\", \"TOTAL_SALES\": \"BRO_SALES\"})\n",
    ")\n",
    "\n",
    "stores = (\n",
    "    craft_store.merge(bro_store, on=store_cols, how=\"left\")\n",
    "               .fillna({\"BRO_VOLUME\": 0, \"BRO_SALES\": 0})\n",
    "               .copy()\n",
    ")\n",
    "stores[\"HAS_BROTHERS\"] = (stores[\"BRO_VOLUME\"] > 0) | (stores[\"BRO_SALES\"] > 0)\n",
    "stores[\"CRAFT_AVG_PRICE\"] = np.where(stores[\"CRAFT_VOLUME\"] > 0,\n",
    "                                     stores[\"CRAFT_SALES\"] / stores[\"CRAFT_VOLUME\"], np.nan)\n",
    "\n",
    "# 只保留未售 Brothers 的店\n",
    "result = stores[~stores[\"HAS_BROTHERS\"]].copy()\n",
    "\n",
    "# Banner 过滤（多选）\n",
    "all_banners = sorted(result[\"BANNER\"].dropna().unique().tolist())\n",
    "sel_banners = st.sidebar.multiselect(\"选择 Banner（默认全部）\", options=all_banners, default=all_banners)\n",
    "if sel_banners:\n",
    "    result = result[result[\"BANNER\"].isin(sel_banners)]\n",
    "\n",
    "# 按 Banner 内部排名（按 Craft Sales 由高到低）\n",
    "result[\"RANK_IN_BANNER\"] = (\n",
    "    result.groupby(\"BANNER\")[\"CRAFT_SALES\"].rank(method=\"first\", ascending=False)\n",
    ")\n",
    "if top_n and top_n > 0:\n",
    "    result = result[result[\"RANK_IN_BANNER\"] <= top_n]\n",
    "\n",
    "result = result.sort_values([\"BANNER\", \"CRAFT_SALES\"], ascending=[True, False])\n",
    "\n",
    "# ============== 展示：概览卡片 ==============\n",
    "left, right = st.columns([2, 1])\n",
    "with left:\n",
    "    st.subheader(\"店面榜单（按 Craft Beer 销售额）\")\n",
    "with right:\n",
    "    st.metric(\"纳入统计的 Banner 数\", len(sorted(result[\"BANNER\"].unique())))\n",
    "\n",
    "# ============== 按 Banner 展示表格 + 图 ==============\n",
    "tabs = st.tabs([f\"{b}\" for b in sorted(result[\"BANNER\"].unique())] or [\"No Data\"])\n",
    "if tabs:\n",
    "    for (b, tab) in zip(sorted(result[\"BANNER\"].unique()), tabs):\n",
    "        with tab:\n",
    "            g = result[result[\"BANNER\"] == b].copy()\n",
    "            st.write(f\"**Banner：{b}**（未售 Brothers）\")\n",
    "            st.dataframe(\n",
    "                g[[\"STORE_REGION\", \"STORE_NAME\", \"STORE_CODE\",\n",
    "                   \"CRAFT_VOLUME\", \"CRAFT_SALES\", \"CRAFT_AVG_PRICE\", \"RANK_IN_BANNER\"]],\n",
    "                use_container_width=True\n",
    "            )\n",
    "\n",
    "            # Top 图（最多前 30 条以避免过长图）\n",
    "            g_top = g.nlargest(min(30, len(g)), \"CRAFT_SALES\").copy()\n",
    "            if not g_top.empty:\n",
    "                chart = (\n",
    "                    alt.Chart(g_top)\n",
    "                      .mark_bar()\n",
    "                      .encode(\n",
    "                          x=alt.X(\"CRAFT_SALES:Q\", title=\"Craft Beer Sales\"),\n",
    "                          y=alt.Y(\"STORE_NAME:N\", sort=\"-x\", title=\"Store\"),\n",
    "                          tooltip=[\n",
    "                              alt.Tooltip(\"STORE_NAME:N\"),\n",
    "                              alt.Tooltip(\"STORE_REGION:N\"),\n",
    "                              alt.Tooltip(\"CRAFT_SALES:Q\", format=\",.0f\"),\n",
    "                              alt.Tooltip(\"CRAFT_VOLUME:Q\", format=\",.0f\"),\n",
    "                          ],\n",
    "                      )\n",
    "                      .properties(height=max(200, 20*len(g_top)))\n",
    "                )\n",
    "                text = chart.mark_text(align=\"left\", dx=3).encode(text=alt.Text(\"CRAFT_SALES:Q\", format=\",.0f\"))\n",
    "                st.altair_chart(chart + text, use_container_width=True)\n",
    "\n",
    "# ============== 汇总与下载 ==============\n",
    "st.subheader(\"汇总（各 Banner）\")\n",
    "summary = (\n",
    "    result.groupby(\"BANNER\", dropna=False)\n",
    "          .agg(\n",
    "              N_STORES=(\"STORE_CODE\", \"nunique\"),\n",
    "              CRAFT_VOLUME=(\"CRAFT_VOLUME\", \"sum\"),\n",
    "              CRAFT_SALES=(\"CRAFT_SALES\", \"sum\")\n",
    "          )\n",
    "          .reset_index()\n",
    "          .sort_values(\"CRAFT_SALES\", ascending=False)\n",
    ")\n",
    "st.dataframe(summary, use_container_width=True)\n",
    "\n",
    "def to_csv_download(df_in: pd.DataFrame, filename: str, label: str):\n",
    "    csv = df_in.to_csv(index=False).encode(\"utf-8-sig\")\n",
    "    st.download_button(label=label, data=csv, file_name=filename, mime=\"text/csv\")\n",
    "\n",
    "col1, col2 = st.columns(2)\n",
    "with col1:\n",
    "    to_csv_download(result, \"stores_no_brothers_by_banner.csv\", \"下载店面榜单 CSV\")\n",
    "with col2:\n",
    "    to_csv_download(summary, \"summary_by_banner.csv\", \"下载各 Banner 汇总 CSV\")\n",
    "\n",
    "st.caption(\"提示：如需限定时间窗口（例如 2024-08 至 2025-08），先把周度列长表化并按月筛选，再回到门店聚合。需要我给你时间窗口版也行～\")\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
